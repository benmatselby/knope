// Code generated by MockGen. DO NOT EDIT.
// Source: client/client.go

// Package mock_client is a generated GoMock package.
package client

import (
	reflect "reflect"

	codebuild "github.com/aws/aws-sdk-go/service/codebuild"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// BatchGetBuilds mocks base method
func (m *MockAPI) BatchGetBuilds(input *codebuild.BatchGetBuildsInput) (*codebuild.BatchGetBuildsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetBuilds", input)
	ret0, _ := ret[0].(*codebuild.BatchGetBuildsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetBuilds indicates an expected call of BatchGetBuilds
func (mr *MockAPIMockRecorder) BatchGetBuilds(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetBuilds", reflect.TypeOf((*MockAPI)(nil).BatchGetBuilds), input)
}

// ListBuildsForProject mocks base method
func (m *MockAPI) ListBuildsForProject(input *codebuild.ListBuildsForProjectInput) (*codebuild.ListBuildsForProjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuildsForProject", input)
	ret0, _ := ret[0].(*codebuild.ListBuildsForProjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuildsForProject indicates an expected call of ListBuildsForProject
func (mr *MockAPIMockRecorder) ListBuildsForProject(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuildsForProject", reflect.TypeOf((*MockAPI)(nil).ListBuildsForProject), input)
}

// ListProjects mocks base method
func (m *MockAPI) ListProjects(input *codebuild.ListProjectsInput) (*codebuild.ListProjectsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", input)
	ret0, _ := ret[0].(*codebuild.ListProjectsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjects indicates an expected call of ListProjects
func (mr *MockAPIMockRecorder) ListProjects(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockAPI)(nil).ListProjects), input)
}
